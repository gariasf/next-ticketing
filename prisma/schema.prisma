generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id String @id @default(cuid())
  username String @unique
  email String @unique
  emailVerified       Boolean              @default(false)
  passwordHash String
  sessions Session[]
  passwordResetTokens PasswordResetToken[]
  tickets Ticket[]
  comments Comment[]

  @@index([email])
}

model Session {
  id String @id
  expiresAt DateTime
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PasswordResetToken {
  tokenHash String   @unique
  expiresAt DateTime
  userId    String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}


model Ticket {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String
  content String @db.VarChar(1014)
  status TicketStatus @default(OPEN)
  deadline String
  bounty Int
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]

  @@index([userId])
}

model Comment {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  content String @db.VarChar(1024)
  ticketId String
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([ticketId])
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  DONE
}
